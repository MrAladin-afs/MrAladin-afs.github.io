---
import Layout from '@layouts/Neovim.astro';
import {basics} from '@cv';

const {email: rawEmail, profiles} = basics;

// Define a default email display when email is empty
const emailBody = rawEmail ? rawEmail.split('@')[0] : '';
const emailDomain = rawEmail && rawEmail.includes('@') ? rawEmail.split('@')[1].split('.')[0] : '';
const emailExtension = rawEmail && rawEmail.includes('@') && rawEmail.split('@')[1].includes('.') ? rawEmail.split('@')[1].split('.')[1] : '';

const parsedProfiles = profiles.map(({url}) => {
  const rawUrl = url;
  
  // Handle cases where URL might not have https or www
  if (url.includes('https://')) {
    url = url.split('https://')[1];
  } else if (url.includes('http://')) {
    url = url.split('http://')[1];
  }
  
  if (url.includes('www.')) {
    url = url.split('www.')[1];
  }
  
  // Handle special cases like Discord links (#)
  if (url === '#') {
    return { url: rawUrl, domain: 'Discord', extension: 'com', params: [] };
  }
  
  const urlParts = url.split('.');
  const domain = urlParts[0];
  
  // Handle URLs with no path parts
  const extensionParts = urlParts.length > 1 ? urlParts[1].split('/') : ['com'];
  const extension = extensionParts[0];
  const params = extensionParts.slice(1).filter(p => p.length > 0);
  
  return {url: rawUrl, domain, extension, params};
});
---

<Layout title="Contact">
  <div class="flex flex-col items-center justify-center h-[100vh]">
    <h1 class="text-4xl font-bold mb-2 text-blue nvim-line">Get in touch!</h1>
    <div class="text-center">
      <div class="mb-4 flex place-content-center">
        <p class="nvim-line max-w-max text-xs">-FiveM Developer-</p>
      </div>
      <p class="mb-3 nvim-line">Please use the contact methods below to get in touch:</p>
      
      <!-- Email render - only show if email exists -->
      {rawEmail && (
        <div class="flex place-content-center">
          <a href={`mailto:${rawEmail}`} data-href={`mailto:${rawEmail}`} class="max-w-max nvim-line">
            {emailBody}<span class='symbol'>[at]</span>{emailDomain}<span class='symbol'>[dot]</span>{emailExtension}
          </a>
        </div>
      )}
      
      <!-- Contacts render -->
      {parsedProfiles && parsedProfiles.map(({ url, domain, extension, params }) => (
        <div class="flex place-content-center">
          <a href={url} data-href={url} class="max-w-max nvim-line">
            {domain}<span class='symbol'>[dot]</span>{extension}
            {params.length > 0 && <span class='symbol'>[slash]</span>}
            {params.map((param, index) => (
              <span>{param}{index < params.length - 1 ? <span class='symbol'>[slash]</span> : ''}</span>
            ))}
          </a>
        </div>
      ))}
    </div>
  </div>
</Layout>

<style>
  a {
    @apply mb-2 block decoration-dotted hover:underline hover:text-green;
  }
  a span.symbol {
    @apply group-hover:text-skin-muted text-blue font-semibold;
  }
</style>